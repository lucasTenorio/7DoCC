//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';
import { environment } from 'src/environments/environment';


export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IPokeService {
    /**
     * @return Success
     */
    apiInteract(): Observable<AnimalStatus>;
    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractFeed(body: AnimalStatus | undefined): Observable<AnimalStatus>;
    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractRest(body: AnimalStatus | undefined): Observable<AnimalStatus>;
    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractPlay(body: AnimalStatus | undefined): Observable<AnimalStatus>;
    /**
     * @return Success
     */
    apiPoke(): Observable<Pokedex>;
    /**
     * @param filter (optional) 
     * @return Success
     */
    apiPokemonDescription(filter: number | undefined): Observable<PokemonStatus>;
}

@Injectable()
export class PokeService implements IPokeService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = environment.API_BASE_URL;
    }

    /**
     * @return Success
     */
    apiInteract(httpContext?: HttpContext): Observable<AnimalStatus> {
        let url_ = this.baseUrl + "/api/Interact";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiInteract(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiInteract(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalStatus>;
        }));
    }

    protected processApiInteract(response: HttpResponseBase): Observable<AnimalStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractFeed(body: AnimalStatus | undefined, httpContext?: HttpContext): Observable<AnimalStatus> {
        let url_ = this.baseUrl + "/api/Interact/feed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiInteractFeed(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiInteractFeed(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalStatus>;
        }));
    }

    protected processApiInteractFeed(response: HttpResponseBase): Observable<AnimalStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 202) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = AnimalStatus.fromJS(resultData202);
            return _observableOf(result202);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractRest(body: AnimalStatus | undefined, httpContext?: HttpContext): Observable<AnimalStatus> {
        let url_ = this.baseUrl + "/api/Interact/rest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiInteractRest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiInteractRest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalStatus>;
        }));
    }

    protected processApiInteractRest(response: HttpResponseBase): Observable<AnimalStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 202) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = AnimalStatus.fromJS(resultData202);
            return _observableOf(result202);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiInteractPlay(body: AnimalStatus | undefined, httpContext?: HttpContext): Observable<AnimalStatus> {
        let url_ = this.baseUrl + "/api/Interact/play";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiInteractPlay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiInteractPlay(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalStatus>;
        }));
    }

    protected processApiInteractPlay(response: HttpResponseBase): Observable<AnimalStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 202) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = AnimalStatus.fromJS(resultData202);
            return _observableOf(result202);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    apiPoke(httpContext?: HttpContext): Observable<Pokedex> {
        let url_ = this.baseUrl + "/Api/Poke";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPoke(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPoke(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Pokedex>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Pokedex>;
        }));
    }

    protected processApiPoke(response: HttpResponseBase): Observable<Pokedex> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pokedex.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Bad Request", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    apiPokemonDescription(filter: number | undefined, httpContext?: HttpContext): Observable<PokemonStatus> {
        let url_ = this.baseUrl + "/Api/PokemonDescription?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPokemonDescription(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPokemonDescription(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PokemonStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PokemonStatus>;
        }));
    }

    protected processApiPokemonDescription(response: HttpResponseBase): Observable<PokemonStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Bad Request", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PokemonStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Abilities implements IAbilities {
    ability?: Ability;
    is_hidden?: boolean;
    slot?: number;

    constructor(data?: IAbilities) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ability = _data["ability"] ? Ability.fromJS(_data["ability"]) : <any>undefined;
            this.is_hidden = _data["is_hidden"];
            this.slot = _data["slot"];
        }
    }

    static fromJS(data: any): Abilities {
        data = typeof data === 'object' ? data : {};
        let result = new Abilities();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ability"] = this.ability ? this.ability.toJSON() : <any>undefined;
        data["is_hidden"] = this.is_hidden;
        data["slot"] = this.slot;
        return data;
    }
}

export interface IAbilities {
    ability?: Ability;
    is_hidden?: boolean;
    slot?: number;
}

export class Ability implements IAbility {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IAbility) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Ability {
        data = typeof data === 'object' ? data : {};
        let result = new Ability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IAbility {
    name?: string | undefined;
    url?: string | undefined;
}

export class AnimalStatus implements IAnimalStatus {
    fome?: number;
    humor?: number;
    energia?: number;

    constructor(data?: IAnimalStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fome = _data["fome"];
            this.humor = _data["humor"];
            this.energia = _data["energia"];
        }
    }

    static fromJS(data: any): AnimalStatus {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fome"] = this.fome;
        data["humor"] = this.humor;
        data["energia"] = this.energia;
        return data;
    }
}

export interface IAnimalStatus {
    fome?: number;
    humor?: number;
    energia?: number;
}

export class Form implements IForm {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Form {
        data = typeof data === 'object' ? data : {};
        let result = new Form();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IForm {
    name?: string | undefined;
    url?: string | undefined;
}

export class GameIndice implements IGameIndice {
    game_index?: number;
    version?: Version;

    constructor(data?: IGameIndice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.game_index = _data["game_index"];
            this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GameIndice {
        data = typeof data === 'object' ? data : {};
        let result = new GameIndice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["game_index"] = this.game_index;
        data["version"] = this.version ? this.version.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGameIndice {
    game_index?: number;
    version?: Version;
}

export class MoveDescription implements IMoveDescription {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IMoveDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): MoveDescription {
        data = typeof data === 'object' ? data : {};
        let result = new MoveDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IMoveDescription {
    name?: string | undefined;
    url?: string | undefined;
}

export class MoveLearnMethod implements IMoveLearnMethod {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IMoveLearnMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): MoveLearnMethod {
        data = typeof data === 'object' ? data : {};
        let result = new MoveLearnMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IMoveLearnMethod {
    name?: string | undefined;
    url?: string | undefined;
}

export class Pokedex implements IPokedex {
    count?: number;
    next?: string | undefined;
    previous?: string | undefined;
    results?: PokeShortDescription[] | undefined;

    constructor(data?: IPokedex) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.next = _data["next"];
            this.previous = _data["previous"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(PokeShortDescription.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Pokedex {
        data = typeof data === 'object' ? data : {};
        let result = new Pokedex();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["next"] = this.next;
        data["previous"] = this.previous;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPokedex {
    count?: number;
    next?: string | undefined;
    previous?: string | undefined;
    results?: PokeShortDescription[] | undefined;
}

export class PokemonMove implements IPokemonMove {
    version_group_details?: VersionGroupDetail[] | undefined;
    move?: MoveDescription;

    constructor(data?: IPokemonMove) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["version_group_details"])) {
                this.version_group_details = [] as any;
                for (let item of _data["version_group_details"])
                    this.version_group_details!.push(VersionGroupDetail.fromJS(item));
            }
            this.move = _data["move"] ? MoveDescription.fromJS(_data["move"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PokemonMove {
        data = typeof data === 'object' ? data : {};
        let result = new PokemonMove();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.version_group_details)) {
            data["version_group_details"] = [];
            for (let item of this.version_group_details)
                data["version_group_details"].push(item.toJSON());
        }
        data["move"] = this.move ? this.move.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPokemonMove {
    version_group_details?: VersionGroupDetail[] | undefined;
    move?: MoveDescription;
}

export class PokemonStatus implements IPokemonStatus {
    id?: number;
    isDefault?: boolean;
    location_area_encounters?: string | undefined;
    name?: string | undefined;
    order?: number;
    height?: number;
    weight?: number;
    base_experience?: number;
    moves?: PokemonMove[] | undefined;
    stats?: Stats[] | undefined;
    types?: Types[] | undefined;
    abilities?: Abilities[] | undefined;
    forms?: Form[] | undefined;
    game_indices?: GameIndice[] | undefined;
    species?: Species;

    constructor(data?: IPokemonStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isDefault = _data["isDefault"];
            this.location_area_encounters = _data["location_area_encounters"];
            this.name = _data["name"];
            this.order = _data["order"];
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.base_experience = _data["base_experience"];
            if (Array.isArray(_data["moves"])) {
                this.moves = [] as any;
                for (let item of _data["moves"])
                    this.moves!.push(PokemonMove.fromJS(item));
            }
            if (Array.isArray(_data["stats"])) {
                this.stats = [] as any;
                for (let item of _data["stats"])
                    this.stats!.push(Stats.fromJS(item));
            }
            if (Array.isArray(_data["types"])) {
                this.types = [] as any;
                for (let item of _data["types"])
                    this.types!.push(Types.fromJS(item));
            }
            if (Array.isArray(_data["abilities"])) {
                this.abilities = [] as any;
                for (let item of _data["abilities"])
                    this.abilities!.push(Abilities.fromJS(item));
            }
            if (Array.isArray(_data["forms"])) {
                this.forms = [] as any;
                for (let item of _data["forms"])
                    this.forms!.push(Form.fromJS(item));
            }
            if (Array.isArray(_data["game_indices"])) {
                this.game_indices = [] as any;
                for (let item of _data["game_indices"])
                    this.game_indices!.push(GameIndice.fromJS(item));
            }
            this.species = _data["species"] ? Species.fromJS(_data["species"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PokemonStatus {
        data = typeof data === 'object' ? data : {};
        let result = new PokemonStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDefault"] = this.isDefault;
        data["location_area_encounters"] = this.location_area_encounters;
        data["name"] = this.name;
        data["order"] = this.order;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["base_experience"] = this.base_experience;
        if (Array.isArray(this.moves)) {
            data["moves"] = [];
            for (let item of this.moves)
                data["moves"].push(item.toJSON());
        }
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item.toJSON());
        }
        if (Array.isArray(this.abilities)) {
            data["abilities"] = [];
            for (let item of this.abilities)
                data["abilities"].push(item.toJSON());
        }
        if (Array.isArray(this.forms)) {
            data["forms"] = [];
            for (let item of this.forms)
                data["forms"].push(item.toJSON());
        }
        if (Array.isArray(this.game_indices)) {
            data["game_indices"] = [];
            for (let item of this.game_indices)
                data["game_indices"].push(item.toJSON());
        }
        data["species"] = this.species ? this.species.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPokemonStatus {
    id?: number;
    isDefault?: boolean;
    location_area_encounters?: string | undefined;
    name?: string | undefined;
    order?: number;
    height?: number;
    weight?: number;
    base_experience?: number;
    moves?: PokemonMove[] | undefined;
    stats?: Stats[] | undefined;
    types?: Types[] | undefined;
    abilities?: Abilities[] | undefined;
    forms?: Form[] | undefined;
    game_indices?: GameIndice[] | undefined;
    species?: Species;
}

export class PokeShortDescription implements IPokeShortDescription {
    name?: string | undefined;
    url?: string | undefined;
    pokemonId?: number;

    constructor(data?: IPokeShortDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
            this.pokemonId = _data["pokemonId"];
        }
    }

    static fromJS(data: any): PokeShortDescription {
        data = typeof data === 'object' ? data : {};
        let result = new PokeShortDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        data["pokemonId"] = this.pokemonId;
        return data;
    }
}

export interface IPokeShortDescription {
    name?: string | undefined;
    url?: string | undefined;
    pokemonId?: number;
}

export class Species implements ISpecies {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: ISpecies) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Species {
        data = typeof data === 'object' ? data : {};
        let result = new Species();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface ISpecies {
    name?: string | undefined;
    url?: string | undefined;
}

export class Stat implements IStat {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IStat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Stat {
        data = typeof data === 'object' ? data : {};
        let result = new Stat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IStat {
    name?: string | undefined;
    url?: string | undefined;
}

export class Stats implements IStats {
    base_stat?: number;
    effort?: number;
    stat?: Stat;

    constructor(data?: IStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.base_stat = _data["base_stat"];
            this.effort = _data["effort"];
            this.stat = _data["stat"] ? Stat.fromJS(_data["stat"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Stats {
        data = typeof data === 'object' ? data : {};
        let result = new Stats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["base_stat"] = this.base_stat;
        data["effort"] = this.effort;
        data["stat"] = this.stat ? this.stat.toJSON() : <any>undefined;
        return data;
    }
}

export interface IStats {
    base_stat?: number;
    effort?: number;
    stat?: Stat;
}

export class Type implements IType {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IType {
    name?: string | undefined;
    url?: string | undefined;
}

export class Types implements ITypes {
    slot?: number;
    type?: Type;

    constructor(data?: ITypes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slot = _data["slot"];
            this.type = _data["type"] ? Type.fromJS(_data["type"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Types {
        data = typeof data === 'object' ? data : {};
        let result = new Types();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slot"] = this.slot;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITypes {
    slot?: number;
    type?: Type;
}

export class Version implements IVersion {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Version {
        data = typeof data === 'object' ? data : {};
        let result = new Version();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IVersion {
    name?: string | undefined;
    url?: string | undefined;
}

export class VersionGroup implements IVersionGroup {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IVersionGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): VersionGroup {
        data = typeof data === 'object' ? data : {};
        let result = new VersionGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IVersionGroup {
    name?: string | undefined;
    url?: string | undefined;
}

export class VersionGroupDetail implements IVersionGroupDetail {
    level_learned_at?: number;
    move_learn_method?: MoveLearnMethod;
    version_group?: VersionGroup;

    constructor(data?: IVersionGroupDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level_learned_at = _data["level_learned_at"];
            this.move_learn_method = _data["move_learn_method"] ? MoveLearnMethod.fromJS(_data["move_learn_method"]) : <any>undefined;
            this.version_group = _data["version_group"] ? VersionGroup.fromJS(_data["version_group"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VersionGroupDetail {
        data = typeof data === 'object' ? data : {};
        let result = new VersionGroupDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level_learned_at"] = this.level_learned_at;
        data["move_learn_method"] = this.move_learn_method ? this.move_learn_method.toJSON() : <any>undefined;
        data["version_group"] = this.version_group ? this.version_group.toJSON() : <any>undefined;
        return data;
    }
}

export interface IVersionGroupDetail {
    level_learned_at?: number;
    move_learn_method?: MoveLearnMethod;
    version_group?: VersionGroup;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}